forbidden = "<>[]{}%$#@^*~"
forbidden_array = [ ord( c ) for c in forbidden ]

def fill_bits( sequence ):
	while len( sequence ) < 8:
		sequence = "0" + sequence
	return sequence

def sequence_to_dec( sequence ):
	result = []
	array = sequence.split()
	for element in array:
		result.append( int( element, 2 ) )
	return result

def xor( sequence1, sequence2 ):
	counter = 0
	result = []
	for number in sequence1:
		result.append( sequence1[ counter ] ^ sequence2[ counter ] )
		counter = counter + 1
	return result

def crib_to_dec( sequence ):
	result = []
	for char in sequence:
		result.append( ord( char ) )
	return result

def xor_crib_at( sequence, crib, at ):
	length = len( crib )
	result = []
	counter = 0
	for i in range( at, at + length ):
		xor_value = sequence[ i ] ^ crib[ counter ]
		if xor_value not in forbidden_array:
			result.append( xor_value )
		counter = counter + 1
	return result

def result_to_string( sequence ):
	result = ""
	for number in sequence:
		result = result + chr( number )
	return result

def result_to_bin( sequence ):
	result = ""
	for number in sequence:
		result = result + fill_bits( bin( number )[ 2: ] ) + " "
	return result

def generate_keys( message, cipher ):
	keys = []
	for i in range( 0, 256 ):
		if message ^ i == cipher:
			keys.append( i )
	return keys

# def generate_multiple_keys( stream, cipher_stream ):

'''
c4 = sequence_to_dec

c14 = sequence_to_dec
'''

c4 = sequence_to_dec

c20 = sequence_to_dec("00111010 11000000 01010000 00001011 00010001 01101011 01001100 10100111 01011000 00011010 10000100 11101110 10010000 10101000 00111101 11110000 00010011 10010111 10111100 00100010 11010001 00010001 11100100 01000100 10110101 11111110 01110110 01111010 11101011 00110011 10000000 10100010 00001001 11111100 10100011 01001100 01101111 00100011 11010110 ")

crib_for_that = "What's in a name? that which we call a" #c4, c20

def get_user_input():
	c1 = c20
	c2 = c4

	c1_len = len( c1 )
	c2_len = len( c2 )

	common_length = c1_len
	if c2_len < c1_len:
		common_length = c2_len

	c1 = c1[ :common_length ]
	c2 = c2[ :common_length ]

	c1_xor_c2 = xor( c1, c2 )

	crib = str( input( "Input crib: " ) )
	crib_dec = crib_to_dec( crib )
	crib_length = len( crib )

	for i in range( 0, common_length - crib_length ):
		xored = xor_crib_at( c1_xor_c2, crib_dec, i )
		string = result_to_string( xored )
		print( i, string )


get_user_input()
# 107 - "n the table" || " not Romeo "
# 01100010 01110010 01110011 01110111 11110100 00010010 11000111 11011010 11001011 00010101 11010010
# 00101100 00111100 01101000 01101011 10110001 01100000 11011100 11010110 11001100 00010110 10010111
#key = generate_keys( ord( "e" ), int( "11010010", 2 ) )[ 0 ]
#print( chr( int( "01100000", 2 ) ^ key ) )
#print( key )

# 62 - "the f" || " and "
# 11110000 10100101 10011001 10001111 11011000
# 10100100 10101100 10010010 11001011 10011110

# key = generate_keys( ord( "f" ), int( "11011000", 2 ) )[ 0 ]
#print( chr( int( "10101100", 2 ) ^ key ) )
#key = keys[ 0 ]
# print( key )

# 00010010 11000111 11011010 11001011 00010101 - Romeo ||  you 
# print( keys )
# print( chr( int( "01110111", 2 ) ^ 61 ) )

# get_user_input()

# while True:
# 	at = int(input("Podaj 'at': "))
# 	xored = xor_crib_at( c3_xor_c4, crib_dec, at )
# 	string = result_to_string( xored )

# 	print( "RESULT: ", string )

# 01100100 10001000 11100011 00011001 11101001
# 00110011 10011001 10101011 00011111 10101000


# c1 = sequence_to_dec("01100100 10001000 11100011 00011001 11101001")
# c2 = sequence_to_dec("00110011 10011001 10101011 00011111 10101000")

# key = crib_to_dec("we ca")
# keys = generate_keys( ord( "n" ), int( "10101010", 2 ) )
# print( chr( int("10101110", 2) ^ 196) )